//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8825
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tax {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RptDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RptDS : global::System.Data.DataSet {
        
        private tblbscsupdtDataTable tabletblbscsupdt;
        
        private taxdeclDataTable tabletaxdecl;
        
        private balancerevDataTable tablebalancerev;
        
        private elbowDataTable tableelbow;
        
        private taxSharingDataTable tabletaxSharing;
        
        private taxclcDataTable tabletaxclc;
        
        private paiedtaxDataTable tablepaiedtax;
        
        private TBLSUBDataTable tableTBLSUB;
        
        private earnJobDataTable tableearnJob;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RptDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RptDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblbscsupdt"] != null)) {
                    base.Tables.Add(new tblbscsupdtDataTable(ds.Tables["tblbscsupdt"]));
                }
                if ((ds.Tables["taxdecl"] != null)) {
                    base.Tables.Add(new taxdeclDataTable(ds.Tables["taxdecl"]));
                }
                if ((ds.Tables["balancerev"] != null)) {
                    base.Tables.Add(new balancerevDataTable(ds.Tables["balancerev"]));
                }
                if ((ds.Tables["elbow"] != null)) {
                    base.Tables.Add(new elbowDataTable(ds.Tables["elbow"]));
                }
                if ((ds.Tables["taxSharing"] != null)) {
                    base.Tables.Add(new taxSharingDataTable(ds.Tables["taxSharing"]));
                }
                if ((ds.Tables["taxclc"] != null)) {
                    base.Tables.Add(new taxclcDataTable(ds.Tables["taxclc"]));
                }
                if ((ds.Tables["paiedtax"] != null)) {
                    base.Tables.Add(new paiedtaxDataTable(ds.Tables["paiedtax"]));
                }
                if ((ds.Tables["TBLSUB"] != null)) {
                    base.Tables.Add(new TBLSUBDataTable(ds.Tables["TBLSUB"]));
                }
                if ((ds.Tables["earnJob"] != null)) {
                    base.Tables.Add(new earnJobDataTable(ds.Tables["earnJob"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblbscsupdtDataTable tblbscsupdt {
            get {
                return this.tabletblbscsupdt;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public taxdeclDataTable taxdecl {
            get {
                return this.tabletaxdecl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public balancerevDataTable balancerev {
            get {
                return this.tablebalancerev;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public elbowDataTable elbow {
            get {
                return this.tableelbow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public taxSharingDataTable taxSharing {
            get {
                return this.tabletaxSharing;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public taxclcDataTable taxclc {
            get {
                return this.tabletaxclc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public paiedtaxDataTable paiedtax {
            get {
                return this.tablepaiedtax;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TBLSUBDataTable TBLSUB {
            get {
                return this.tableTBLSUB;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public earnJobDataTable earnJob {
            get {
                return this.tableearnJob;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RptDS cln = ((RptDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tblbscsupdt"] != null)) {
                    base.Tables.Add(new tblbscsupdtDataTable(ds.Tables["tblbscsupdt"]));
                }
                if ((ds.Tables["taxdecl"] != null)) {
                    base.Tables.Add(new taxdeclDataTable(ds.Tables["taxdecl"]));
                }
                if ((ds.Tables["balancerev"] != null)) {
                    base.Tables.Add(new balancerevDataTable(ds.Tables["balancerev"]));
                }
                if ((ds.Tables["elbow"] != null)) {
                    base.Tables.Add(new elbowDataTable(ds.Tables["elbow"]));
                }
                if ((ds.Tables["taxSharing"] != null)) {
                    base.Tables.Add(new taxSharingDataTable(ds.Tables["taxSharing"]));
                }
                if ((ds.Tables["taxclc"] != null)) {
                    base.Tables.Add(new taxclcDataTable(ds.Tables["taxclc"]));
                }
                if ((ds.Tables["paiedtax"] != null)) {
                    base.Tables.Add(new paiedtaxDataTable(ds.Tables["paiedtax"]));
                }
                if ((ds.Tables["TBLSUB"] != null)) {
                    base.Tables.Add(new TBLSUBDataTable(ds.Tables["TBLSUB"]));
                }
                if ((ds.Tables["earnJob"] != null)) {
                    base.Tables.Add(new earnJobDataTable(ds.Tables["earnJob"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletblbscsupdt = ((tblbscsupdtDataTable)(base.Tables["tblbscsupdt"]));
            if ((initTable == true)) {
                if ((this.tabletblbscsupdt != null)) {
                    this.tabletblbscsupdt.InitVars();
                }
            }
            this.tabletaxdecl = ((taxdeclDataTable)(base.Tables["taxdecl"]));
            if ((initTable == true)) {
                if ((this.tabletaxdecl != null)) {
                    this.tabletaxdecl.InitVars();
                }
            }
            this.tablebalancerev = ((balancerevDataTable)(base.Tables["balancerev"]));
            if ((initTable == true)) {
                if ((this.tablebalancerev != null)) {
                    this.tablebalancerev.InitVars();
                }
            }
            this.tableelbow = ((elbowDataTable)(base.Tables["elbow"]));
            if ((initTable == true)) {
                if ((this.tableelbow != null)) {
                    this.tableelbow.InitVars();
                }
            }
            this.tabletaxSharing = ((taxSharingDataTable)(base.Tables["taxSharing"]));
            if ((initTable == true)) {
                if ((this.tabletaxSharing != null)) {
                    this.tabletaxSharing.InitVars();
                }
            }
            this.tabletaxclc = ((taxclcDataTable)(base.Tables["taxclc"]));
            if ((initTable == true)) {
                if ((this.tabletaxclc != null)) {
                    this.tabletaxclc.InitVars();
                }
            }
            this.tablepaiedtax = ((paiedtaxDataTable)(base.Tables["paiedtax"]));
            if ((initTable == true)) {
                if ((this.tablepaiedtax != null)) {
                    this.tablepaiedtax.InitVars();
                }
            }
            this.tableTBLSUB = ((TBLSUBDataTable)(base.Tables["TBLSUB"]));
            if ((initTable == true)) {
                if ((this.tableTBLSUB != null)) {
                    this.tableTBLSUB.InitVars();
                }
            }
            this.tableearnJob = ((earnJobDataTable)(base.Tables["earnJob"]));
            if ((initTable == true)) {
                if ((this.tableearnJob != null)) {
                    this.tableearnJob.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RptDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RptDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletblbscsupdt = new tblbscsupdtDataTable();
            base.Tables.Add(this.tabletblbscsupdt);
            this.tabletaxdecl = new taxdeclDataTable();
            base.Tables.Add(this.tabletaxdecl);
            this.tablebalancerev = new balancerevDataTable();
            base.Tables.Add(this.tablebalancerev);
            this.tableelbow = new elbowDataTable();
            base.Tables.Add(this.tableelbow);
            this.tabletaxSharing = new taxSharingDataTable();
            base.Tables.Add(this.tabletaxSharing);
            this.tabletaxclc = new taxclcDataTable();
            base.Tables.Add(this.tabletaxclc);
            this.tablepaiedtax = new paiedtaxDataTable();
            base.Tables.Add(this.tablepaiedtax);
            this.tableTBLSUB = new TBLSUBDataTable();
            base.Tables.Add(this.tableTBLSUB);
            this.tableearnJob = new earnJobDataTable();
            base.Tables.Add(this.tableearnJob);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetblbscsupdt() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetaxdecl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebalancerev() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeelbow() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetaxSharing() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetaxclc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepaiedtax() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTBLSUB() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeearnJob() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RptDS ds = new RptDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tblbscsupdtRowChangeEventHandler(object sender, tblbscsupdtRowChangeEvent e);
        
        public delegate void taxdeclRowChangeEventHandler(object sender, taxdeclRowChangeEvent e);
        
        public delegate void balancerevRowChangeEventHandler(object sender, balancerevRowChangeEvent e);
        
        public delegate void elbowRowChangeEventHandler(object sender, elbowRowChangeEvent e);
        
        public delegate void taxSharingRowChangeEventHandler(object sender, taxSharingRowChangeEvent e);
        
        public delegate void taxclcRowChangeEventHandler(object sender, taxclcRowChangeEvent e);
        
        public delegate void paiedtaxRowChangeEventHandler(object sender, paiedtaxRowChangeEvent e);
        
        public delegate void TBLSUBRowChangeEventHandler(object sender, TBLSUBRowChangeEvent e);
        
        public delegate void earnJobRowChangeEventHandler(object sender, earnJobRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tblbscsupdtDataTable : global::System.Data.TypedTableBase<tblbscsupdtRow> {
            
            private global::System.Data.DataColumn columndocno;
            
            private global::System.Data.DataColumn columnsupnm;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnprftcred;
            
            private global::System.Data.DataColumn columnfreejbscred;
            
            private global::System.Data.DataColumn columntaxcd;
            
            private global::System.Data.DataColumn columntaxnm;
            
            private global::System.Data.DataColumn columntaxfileNo;
            
            private global::System.Data.DataColumn columntaxrecNo;
            
            private global::System.Data.DataColumn columnprftdep;
            
            private global::System.Data.DataColumn columnfreejbsdep;
            
            private global::System.Data.DataColumn columnprc;
            
            private global::System.Data.DataColumn columntxDep_Nm;
            
            private global::System.Data.DataColumn columndt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtDataTable() {
                this.TableName = "tblbscsupdt";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblbscsupdtDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tblbscsupdtDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docnoColumn {
                get {
                    return this.columndocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supnmColumn {
                get {
                    return this.columnsupnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prftcredColumn {
                get {
                    return this.columnprftcred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freejbscredColumn {
                get {
                    return this.columnfreejbscred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxcdColumn {
                get {
                    return this.columntaxcd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxnmColumn {
                get {
                    return this.columntaxnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxfileNoColumn {
                get {
                    return this.columntaxfileNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxrecNoColumn {
                get {
                    return this.columntaxrecNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prftdepColumn {
                get {
                    return this.columnprftdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freejbsdepColumn {
                get {
                    return this.columnfreejbsdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prcColumn {
                get {
                    return this.columnprc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn txDep_NmColumn {
                get {
                    return this.columntxDep_Nm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtColumn {
                get {
                    return this.columndt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtRow this[int index] {
                get {
                    return ((tblbscsupdtRow)(this.Rows[index]));
                }
            }
            
            public event tblbscsupdtRowChangeEventHandler tblbscsupdtRowChanging;
            
            public event tblbscsupdtRowChangeEventHandler tblbscsupdtRowChanged;
            
            public event tblbscsupdtRowChangeEventHandler tblbscsupdtRowDeleting;
            
            public event tblbscsupdtRowChangeEventHandler tblbscsupdtRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtblbscsupdtRow(tblbscsupdtRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtRow AddtblbscsupdtRow(string docno, string supnm, System.DateTime date, decimal prftcred, decimal freejbscred, string taxcd, string taxnm, string taxfileNo, string taxrecNo, decimal prftdep, decimal freejbsdep, decimal prc, string txDep_Nm, System.DateTime dt) {
                tblbscsupdtRow rowtblbscsupdtRow = ((tblbscsupdtRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        docno,
                        supnm,
                        date,
                        prftcred,
                        freejbscred,
                        taxcd,
                        taxnm,
                        taxfileNo,
                        taxrecNo,
                        prftdep,
                        freejbsdep,
                        prc,
                        txDep_Nm,
                        dt};
                rowtblbscsupdtRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtblbscsupdtRow);
                return rowtblbscsupdtRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tblbscsupdtDataTable cln = ((tblbscsupdtDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tblbscsupdtDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocno = base.Columns["docno"];
                this.columnsupnm = base.Columns["supnm"];
                this.columndate = base.Columns["date"];
                this.columnprftcred = base.Columns["prftcred"];
                this.columnfreejbscred = base.Columns["freejbscred"];
                this.columntaxcd = base.Columns["taxcd"];
                this.columntaxnm = base.Columns["taxnm"];
                this.columntaxfileNo = base.Columns["taxfileNo"];
                this.columntaxrecNo = base.Columns["taxrecNo"];
                this.columnprftdep = base.Columns["prftdep"];
                this.columnfreejbsdep = base.Columns["freejbsdep"];
                this.columnprc = base.Columns["prc"];
                this.columntxDep_Nm = base.Columns["txDep_Nm"];
                this.columndt = base.Columns["dt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocno = new global::System.Data.DataColumn("docno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocno);
                this.columnsupnm = new global::System.Data.DataColumn("supnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupnm);
                this.columndate = new global::System.Data.DataColumn("date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnprftcred = new global::System.Data.DataColumn("prftcred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprftcred);
                this.columnfreejbscred = new global::System.Data.DataColumn("freejbscred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreejbscred);
                this.columntaxcd = new global::System.Data.DataColumn("taxcd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxcd);
                this.columntaxnm = new global::System.Data.DataColumn("taxnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxnm);
                this.columntaxfileNo = new global::System.Data.DataColumn("taxfileNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxfileNo);
                this.columntaxrecNo = new global::System.Data.DataColumn("taxrecNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxrecNo);
                this.columnprftdep = new global::System.Data.DataColumn("prftdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprftdep);
                this.columnfreejbsdep = new global::System.Data.DataColumn("freejbsdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreejbsdep);
                this.columnprc = new global::System.Data.DataColumn("prc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprc);
                this.columntxDep_Nm = new global::System.Data.DataColumn("txDep_Nm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntxDep_Nm);
                this.columndt = new global::System.Data.DataColumn("dt", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndt);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtRow NewtblbscsupdtRow() {
                return ((tblbscsupdtRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tblbscsupdtRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tblbscsupdtRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblbscsupdtRowChanged != null)) {
                    this.tblbscsupdtRowChanged(this, new tblbscsupdtRowChangeEvent(((tblbscsupdtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblbscsupdtRowChanging != null)) {
                    this.tblbscsupdtRowChanging(this, new tblbscsupdtRowChangeEvent(((tblbscsupdtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblbscsupdtRowDeleted != null)) {
                    this.tblbscsupdtRowDeleted(this, new tblbscsupdtRowChangeEvent(((tblbscsupdtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblbscsupdtRowDeleting != null)) {
                    this.tblbscsupdtRowDeleting(this, new tblbscsupdtRowChangeEvent(((tblbscsupdtRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetblbscsupdtRow(tblbscsupdtRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tblbscsupdtDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class taxdeclDataTable : global::System.Data.TypedTableBase<taxdeclRow> {
            
            private global::System.Data.DataColumn columncredsum;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntaxprc;
            
            private global::System.Data.DataColumn columnperiod;
            
            private global::System.Data.DataColumn columnsupnm;
            
            private global::System.Data.DataColumn columnnotes;
            
            private global::System.Data.DataColumn columncheckNo;
            
            private global::System.Data.DataColumn columncheckDate;
            
            private global::System.Data.DataColumn columnbank;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclDataTable() {
                this.TableName = "taxdecl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxdeclDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected taxdeclDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credsumColumn {
                get {
                    return this.columncredsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxprcColumn {
                get {
                    return this.columntaxprc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn periodColumn {
                get {
                    return this.columnperiod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supnmColumn {
                get {
                    return this.columnsupnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn notesColumn {
                get {
                    return this.columnnotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn checkNoColumn {
                get {
                    return this.columncheckNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn checkDateColumn {
                get {
                    return this.columncheckDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankColumn {
                get {
                    return this.columnbank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclRow this[int index] {
                get {
                    return ((taxdeclRow)(this.Rows[index]));
                }
            }
            
            public event taxdeclRowChangeEventHandler taxdeclRowChanging;
            
            public event taxdeclRowChangeEventHandler taxdeclRowChanged;
            
            public event taxdeclRowChangeEventHandler taxdeclRowDeleting;
            
            public event taxdeclRowChangeEventHandler taxdeclRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtaxdeclRow(taxdeclRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclRow AddtaxdeclRow(decimal credsum, System.DateTime date, decimal taxprc, string period, string supnm, string notes, string checkNo, System.DateTime checkDate, string bank) {
                taxdeclRow rowtaxdeclRow = ((taxdeclRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        credsum,
                        date,
                        taxprc,
                        period,
                        supnm,
                        notes,
                        checkNo,
                        checkDate,
                        bank};
                rowtaxdeclRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtaxdeclRow);
                return rowtaxdeclRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                taxdeclDataTable cln = ((taxdeclDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new taxdeclDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncredsum = base.Columns["credsum"];
                this.columndate = base.Columns["date"];
                this.columntaxprc = base.Columns["taxprc"];
                this.columnperiod = base.Columns["period"];
                this.columnsupnm = base.Columns["supnm"];
                this.columnnotes = base.Columns["notes"];
                this.columncheckNo = base.Columns["checkNo"];
                this.columncheckDate = base.Columns["checkDate"];
                this.columnbank = base.Columns["bank"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncredsum = new global::System.Data.DataColumn("credsum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncredsum);
                this.columndate = new global::System.Data.DataColumn("date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntaxprc = new global::System.Data.DataColumn("taxprc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxprc);
                this.columnperiod = new global::System.Data.DataColumn("period", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiod);
                this.columnsupnm = new global::System.Data.DataColumn("supnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupnm);
                this.columnnotes = new global::System.Data.DataColumn("notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnotes);
                this.columncheckNo = new global::System.Data.DataColumn("checkNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckNo);
                this.columncheckDate = new global::System.Data.DataColumn("checkDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckDate);
                this.columnbank = new global::System.Data.DataColumn("bank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclRow NewtaxdeclRow() {
                return ((taxdeclRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new taxdeclRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(taxdeclRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.taxdeclRowChanged != null)) {
                    this.taxdeclRowChanged(this, new taxdeclRowChangeEvent(((taxdeclRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.taxdeclRowChanging != null)) {
                    this.taxdeclRowChanging(this, new taxdeclRowChangeEvent(((taxdeclRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.taxdeclRowDeleted != null)) {
                    this.taxdeclRowDeleted(this, new taxdeclRowChangeEvent(((taxdeclRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.taxdeclRowDeleting != null)) {
                    this.taxdeclRowDeleting(this, new taxdeclRowChangeEvent(((taxdeclRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetaxdeclRow(taxdeclRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "taxdeclDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class balancerevDataTable : global::System.Data.TypedTableBase<balancerevRow> {
            
            private global::System.Data.DataColumn columndocnm;
            
            private global::System.Data.DataColumn columndep_nkdy_doc;
            
            private global::System.Data.DataColumn columndep_nkdy_tsw;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntypnm;
            
            private global::System.Data.DataColumn columncred_nkdy_doc;
            
            private global::System.Data.DataColumn columncred_nkdy_tsw;
            
            private global::System.Data.DataColumn columndep_tsw_tsw;
            
            private global::System.Data.DataColumn columndep_tsw_doc;
            
            private global::System.Data.DataColumn columncred_tsw_tsw;
            
            private global::System.Data.DataColumn columncred_tsw_doc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevDataTable() {
                this.TableName = "balancerev";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal balancerevDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected balancerevDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docnmColumn {
                get {
                    return this.columndocnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dep_nkdy_docColumn {
                get {
                    return this.columndep_nkdy_doc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dep_nkdy_tswColumn {
                get {
                    return this.columndep_nkdy_tsw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typnmColumn {
                get {
                    return this.columntypnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cred_nkdy_docColumn {
                get {
                    return this.columncred_nkdy_doc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cred_nkdy_tswColumn {
                get {
                    return this.columncred_nkdy_tsw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dep_tsw_tswColumn {
                get {
                    return this.columndep_tsw_tsw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dep_tsw_docColumn {
                get {
                    return this.columndep_tsw_doc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cred_tsw_tswColumn {
                get {
                    return this.columncred_tsw_tsw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cred_tsw_docColumn {
                get {
                    return this.columncred_tsw_doc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevRow this[int index] {
                get {
                    return ((balancerevRow)(this.Rows[index]));
                }
            }
            
            public event balancerevRowChangeEventHandler balancerevRowChanging;
            
            public event balancerevRowChangeEventHandler balancerevRowChanged;
            
            public event balancerevRowChangeEventHandler balancerevRowDeleting;
            
            public event balancerevRowChangeEventHandler balancerevRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbalancerevRow(balancerevRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevRow AddbalancerevRow(string docnm, decimal dep_nkdy_doc, decimal dep_nkdy_tsw, System.DateTime date, string typnm, decimal cred_nkdy_doc, decimal cred_nkdy_tsw, decimal dep_tsw_tsw, decimal dep_tsw_doc, decimal cred_tsw_tsw, decimal cred_tsw_doc) {
                balancerevRow rowbalancerevRow = ((balancerevRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        docnm,
                        dep_nkdy_doc,
                        dep_nkdy_tsw,
                        date,
                        typnm,
                        cred_nkdy_doc,
                        cred_nkdy_tsw,
                        dep_tsw_tsw,
                        dep_tsw_doc,
                        cred_tsw_tsw,
                        cred_tsw_doc};
                rowbalancerevRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbalancerevRow);
                return rowbalancerevRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                balancerevDataTable cln = ((balancerevDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new balancerevDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocnm = base.Columns["docnm"];
                this.columndep_nkdy_doc = base.Columns["dep_nkdy_doc"];
                this.columndep_nkdy_tsw = base.Columns["dep_nkdy_tsw"];
                this.columndate = base.Columns["date"];
                this.columntypnm = base.Columns["typnm"];
                this.columncred_nkdy_doc = base.Columns["cred_nkdy_doc"];
                this.columncred_nkdy_tsw = base.Columns["cred_nkdy_tsw"];
                this.columndep_tsw_tsw = base.Columns["dep_tsw_tsw"];
                this.columndep_tsw_doc = base.Columns["dep_tsw_doc"];
                this.columncred_tsw_tsw = base.Columns["cred_tsw_tsw"];
                this.columncred_tsw_doc = base.Columns["cred_tsw_doc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocnm = new global::System.Data.DataColumn("docnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocnm);
                this.columndep_nkdy_doc = new global::System.Data.DataColumn("dep_nkdy_doc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndep_nkdy_doc);
                this.columndep_nkdy_tsw = new global::System.Data.DataColumn("dep_nkdy_tsw", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndep_nkdy_tsw);
                this.columndate = new global::System.Data.DataColumn("date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntypnm = new global::System.Data.DataColumn("typnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntypnm);
                this.columncred_nkdy_doc = new global::System.Data.DataColumn("cred_nkdy_doc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncred_nkdy_doc);
                this.columncred_nkdy_tsw = new global::System.Data.DataColumn("cred_nkdy_tsw", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncred_nkdy_tsw);
                this.columndep_tsw_tsw = new global::System.Data.DataColumn("dep_tsw_tsw", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndep_tsw_tsw);
                this.columndep_tsw_doc = new global::System.Data.DataColumn("dep_tsw_doc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndep_tsw_doc);
                this.columncred_tsw_tsw = new global::System.Data.DataColumn("cred_tsw_tsw", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncred_tsw_tsw);
                this.columncred_tsw_doc = new global::System.Data.DataColumn("cred_tsw_doc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncred_tsw_doc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevRow NewbalancerevRow() {
                return ((balancerevRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new balancerevRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(balancerevRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.balancerevRowChanged != null)) {
                    this.balancerevRowChanged(this, new balancerevRowChangeEvent(((balancerevRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.balancerevRowChanging != null)) {
                    this.balancerevRowChanging(this, new balancerevRowChangeEvent(((balancerevRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.balancerevRowDeleted != null)) {
                    this.balancerevRowDeleted(this, new balancerevRowChangeEvent(((balancerevRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.balancerevRowDeleting != null)) {
                    this.balancerevRowDeleting(this, new balancerevRowChangeEvent(((balancerevRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebalancerevRow(balancerevRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "balancerevDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class elbowDataTable : global::System.Data.TypedTableBase<elbowRow> {
            
            private global::System.Data.DataColumn columnearndep;
            
            private global::System.Data.DataColumn columnprftdep;
            
            private global::System.Data.DataColumn columnstmpdep;
            
            private global::System.Data.DataColumn columnfincombdep;
            
            private global::System.Data.DataColumn columnsuppcomdep;
            
            private global::System.Data.DataColumn columnearncred;
            
            private global::System.Data.DataColumn columnprftcred;
            
            private global::System.Data.DataColumn columnstmpcred;
            
            private global::System.Data.DataColumn columnfincombcred;
            
            private global::System.Data.DataColumn columnsuppcomcred;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowDataTable() {
                this.TableName = "elbow";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal elbowDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected elbowDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earndepColumn {
                get {
                    return this.columnearndep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prftdepColumn {
                get {
                    return this.columnprftdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpdepColumn {
                get {
                    return this.columnstmpdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fincombdepColumn {
                get {
                    return this.columnfincombdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suppcomdepColumn {
                get {
                    return this.columnsuppcomdep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earncredColumn {
                get {
                    return this.columnearncred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prftcredColumn {
                get {
                    return this.columnprftcred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpcredColumn {
                get {
                    return this.columnstmpcred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fincombcredColumn {
                get {
                    return this.columnfincombcred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suppcomcredColumn {
                get {
                    return this.columnsuppcomcred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowRow this[int index] {
                get {
                    return ((elbowRow)(this.Rows[index]));
                }
            }
            
            public event elbowRowChangeEventHandler elbowRowChanging;
            
            public event elbowRowChangeEventHandler elbowRowChanged;
            
            public event elbowRowChangeEventHandler elbowRowDeleting;
            
            public event elbowRowChangeEventHandler elbowRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddelbowRow(elbowRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowRow AddelbowRow(decimal earndep, decimal prftdep, decimal stmpdep, decimal fincombdep, decimal suppcomdep, decimal earncred, decimal prftcred, decimal stmpcred, decimal fincombcred, decimal suppcomcred) {
                elbowRow rowelbowRow = ((elbowRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        earndep,
                        prftdep,
                        stmpdep,
                        fincombdep,
                        suppcomdep,
                        earncred,
                        prftcred,
                        stmpcred,
                        fincombcred,
                        suppcomcred};
                rowelbowRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowelbowRow);
                return rowelbowRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                elbowDataTable cln = ((elbowDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new elbowDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnearndep = base.Columns["earndep"];
                this.columnprftdep = base.Columns["prftdep"];
                this.columnstmpdep = base.Columns["stmpdep"];
                this.columnfincombdep = base.Columns["fincombdep"];
                this.columnsuppcomdep = base.Columns["suppcomdep"];
                this.columnearncred = base.Columns["earncred"];
                this.columnprftcred = base.Columns["prftcred"];
                this.columnstmpcred = base.Columns["stmpcred"];
                this.columnfincombcred = base.Columns["fincombcred"];
                this.columnsuppcomcred = base.Columns["suppcomcred"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnearndep = new global::System.Data.DataColumn("earndep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearndep);
                this.columnprftdep = new global::System.Data.DataColumn("prftdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprftdep);
                this.columnstmpdep = new global::System.Data.DataColumn("stmpdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpdep);
                this.columnfincombdep = new global::System.Data.DataColumn("fincombdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfincombdep);
                this.columnsuppcomdep = new global::System.Data.DataColumn("suppcomdep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuppcomdep);
                this.columnearncred = new global::System.Data.DataColumn("earncred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearncred);
                this.columnprftcred = new global::System.Data.DataColumn("prftcred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprftcred);
                this.columnstmpcred = new global::System.Data.DataColumn("stmpcred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpcred);
                this.columnfincombcred = new global::System.Data.DataColumn("fincombcred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfincombcred);
                this.columnsuppcomcred = new global::System.Data.DataColumn("suppcomcred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuppcomcred);
                this.columnearncred.Caption = "earndep";
                this.columnprftcred.Caption = "prftdep";
                this.columnstmpcred.Caption = "stmpdep";
                this.columnfincombcred.Caption = "fincombdep";
                this.columnsuppcomcred.Caption = "suppcomdep";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowRow NewelbowRow() {
                return ((elbowRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new elbowRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(elbowRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.elbowRowChanged != null)) {
                    this.elbowRowChanged(this, new elbowRowChangeEvent(((elbowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.elbowRowChanging != null)) {
                    this.elbowRowChanging(this, new elbowRowChangeEvent(((elbowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.elbowRowDeleted != null)) {
                    this.elbowRowDeleted(this, new elbowRowChangeEvent(((elbowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.elbowRowDeleting != null)) {
                    this.elbowRowDeleting(this, new elbowRowChangeEvent(((elbowRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveelbowRow(elbowRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "elbowDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class taxSharingDataTable : global::System.Data.TypedTableBase<taxSharingRow> {
            
            private global::System.Data.DataColumn columndatefrm;
            
            private global::System.Data.DataColumn columndateto;
            
            private global::System.Data.DataColumn columndep;
            
            private global::System.Data.DataColumn columncred;
            
            private global::System.Data.DataColumn columnlbl;
            
            private global::System.Data.DataColumn columndocno;
            
            private global::System.Data.DataColumn columntyp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingDataTable() {
                this.TableName = "taxSharing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxSharingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected taxSharingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datefrmColumn {
                get {
                    return this.columndatefrm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datetoColumn {
                get {
                    return this.columndateto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn depColumn {
                get {
                    return this.columndep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credColumn {
                get {
                    return this.columncred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lblColumn {
                get {
                    return this.columnlbl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docnoColumn {
                get {
                    return this.columndocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typColumn {
                get {
                    return this.columntyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingRow this[int index] {
                get {
                    return ((taxSharingRow)(this.Rows[index]));
                }
            }
            
            public event taxSharingRowChangeEventHandler taxSharingRowChanging;
            
            public event taxSharingRowChangeEventHandler taxSharingRowChanged;
            
            public event taxSharingRowChangeEventHandler taxSharingRowDeleting;
            
            public event taxSharingRowChangeEventHandler taxSharingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtaxSharingRow(taxSharingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingRow AddtaxSharingRow(System.DateTime datefrm, System.DateTime dateto, decimal dep, decimal cred, string lbl, string docno, string typ) {
                taxSharingRow rowtaxSharingRow = ((taxSharingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        datefrm,
                        dateto,
                        dep,
                        cred,
                        lbl,
                        docno,
                        typ};
                rowtaxSharingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtaxSharingRow);
                return rowtaxSharingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                taxSharingDataTable cln = ((taxSharingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new taxSharingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndatefrm = base.Columns["datefrm"];
                this.columndateto = base.Columns["dateto"];
                this.columndep = base.Columns["dep"];
                this.columncred = base.Columns["cred"];
                this.columnlbl = base.Columns["lbl"];
                this.columndocno = base.Columns["docno"];
                this.columntyp = base.Columns["typ"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndatefrm = new global::System.Data.DataColumn("datefrm", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatefrm);
                this.columndateto = new global::System.Data.DataColumn("dateto", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndateto);
                this.columndep = new global::System.Data.DataColumn("dep", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndep);
                this.columncred = new global::System.Data.DataColumn("cred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncred);
                this.columnlbl = new global::System.Data.DataColumn("lbl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlbl);
                this.columndocno = new global::System.Data.DataColumn("docno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocno);
                this.columntyp = new global::System.Data.DataColumn("typ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntyp);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingRow NewtaxSharingRow() {
                return ((taxSharingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new taxSharingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(taxSharingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.taxSharingRowChanged != null)) {
                    this.taxSharingRowChanged(this, new taxSharingRowChangeEvent(((taxSharingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.taxSharingRowChanging != null)) {
                    this.taxSharingRowChanging(this, new taxSharingRowChangeEvent(((taxSharingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.taxSharingRowDeleted != null)) {
                    this.taxSharingRowDeleted(this, new taxSharingRowChangeEvent(((taxSharingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.taxSharingRowDeleting != null)) {
                    this.taxSharingRowDeleting(this, new taxSharingRowChangeEvent(((taxSharingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetaxSharingRow(taxSharingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "taxSharingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class taxclcDataTable : global::System.Data.TypedTableBase<taxclcRow> {
            
            private global::System.Data.DataColumn columndoctyp;
            
            private global::System.Data.DataColumn columndatfrm;
            
            private global::System.Data.DataColumn columndatto;
            
            private global::System.Data.DataColumn columnstmpdmnd;
            
            private global::System.Data.DataColumn columnstmpknd;
            
            private global::System.Data.DataColumn columnstmpndus;
            
            private global::System.Data.DataColumn columnstmpcons;
            
            private global::System.Data.DataColumn columnstmpsup;
            
            private global::System.Data.DataColumn columnsuppcom;
            
            private global::System.Data.DataColumn columnfincomb;
            
            private global::System.Data.DataColumn columnfreejbs;
            
            private global::System.Data.DataColumn columnprft;
            
            private global::System.Data.DataColumn columnstmp;
            
            private global::System.Data.DataColumn columncontract;
            
            private global::System.Data.DataColumn columntswya;
            
            private global::System.Data.DataColumn columncheck;
            
            private global::System.Data.DataColumn columndepsum;
            
            private global::System.Data.DataColumn columncredsum;
            
            private global::System.Data.DataColumn columndocno;
            
            private global::System.Data.DataColumn columnearn;
            
            private global::System.Data.DataColumn columnknd;
            
            private global::System.Data.DataColumn columntypcd;
            
            private global::System.Data.DataColumn columninternaltax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcDataTable() {
                this.TableName = "taxclc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxclcDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected taxclcDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn doctypColumn {
                get {
                    return this.columndoctyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datfrmColumn {
                get {
                    return this.columndatfrm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dattoColumn {
                get {
                    return this.columndatto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpdmndColumn {
                get {
                    return this.columnstmpdmnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpkndColumn {
                get {
                    return this.columnstmpknd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpndusColumn {
                get {
                    return this.columnstmpndus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpconsColumn {
                get {
                    return this.columnstmpcons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpsupColumn {
                get {
                    return this.columnstmpsup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suppcomColumn {
                get {
                    return this.columnsuppcom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fincombColumn {
                get {
                    return this.columnfincomb;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freejbsColumn {
                get {
                    return this.columnfreejbs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prftColumn {
                get {
                    return this.columnprft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stmpColumn {
                get {
                    return this.columnstmp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contractColumn {
                get {
                    return this.columncontract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tswyaColumn {
                get {
                    return this.columntswya;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn checkColumn {
                get {
                    return this.columncheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn depsumColumn {
                get {
                    return this.columndepsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credsumColumn {
                get {
                    return this.columncredsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docnoColumn {
                get {
                    return this.columndocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn earnColumn {
                get {
                    return this.columnearn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kndColumn {
                get {
                    return this.columnknd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typcdColumn {
                get {
                    return this.columntypcd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn internaltaxColumn {
                get {
                    return this.columninternaltax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcRow this[int index] {
                get {
                    return ((taxclcRow)(this.Rows[index]));
                }
            }
            
            public event taxclcRowChangeEventHandler taxclcRowChanging;
            
            public event taxclcRowChangeEventHandler taxclcRowChanged;
            
            public event taxclcRowChangeEventHandler taxclcRowDeleting;
            
            public event taxclcRowChangeEventHandler taxclcRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtaxclcRow(taxclcRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcRow AddtaxclcRow(
                        string doctyp, 
                        System.DateTime datfrm, 
                        System.DateTime datto, 
                        decimal stmpdmnd, 
                        decimal stmpknd, 
                        decimal stmpndus, 
                        decimal stmpcons, 
                        decimal stmpsup, 
                        decimal suppcom, 
                        decimal fincomb, 
                        decimal freejbs, 
                        decimal prft, 
                        decimal stmp, 
                        decimal contract, 
                        decimal tswya, 
                        decimal check, 
                        decimal depsum, 
                        decimal credsum, 
                        decimal docno, 
                        decimal earn, 
                        string knd, 
                        short typcd, 
                        decimal internaltax) {
                taxclcRow rowtaxclcRow = ((taxclcRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        doctyp,
                        datfrm,
                        datto,
                        stmpdmnd,
                        stmpknd,
                        stmpndus,
                        stmpcons,
                        stmpsup,
                        suppcom,
                        fincomb,
                        freejbs,
                        prft,
                        stmp,
                        contract,
                        tswya,
                        check,
                        depsum,
                        credsum,
                        docno,
                        earn,
                        knd,
                        typcd,
                        internaltax};
                rowtaxclcRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtaxclcRow);
                return rowtaxclcRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                taxclcDataTable cln = ((taxclcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new taxclcDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndoctyp = base.Columns["doctyp"];
                this.columndatfrm = base.Columns["datfrm"];
                this.columndatto = base.Columns["datto"];
                this.columnstmpdmnd = base.Columns["stmpdmnd"];
                this.columnstmpknd = base.Columns["stmpknd"];
                this.columnstmpndus = base.Columns["stmpndus"];
                this.columnstmpcons = base.Columns["stmpcons"];
                this.columnstmpsup = base.Columns["stmpsup"];
                this.columnsuppcom = base.Columns["suppcom"];
                this.columnfincomb = base.Columns["fincomb"];
                this.columnfreejbs = base.Columns["freejbs"];
                this.columnprft = base.Columns["prft"];
                this.columnstmp = base.Columns["stmp"];
                this.columncontract = base.Columns["contract"];
                this.columntswya = base.Columns["tswya"];
                this.columncheck = base.Columns["check"];
                this.columndepsum = base.Columns["depsum"];
                this.columncredsum = base.Columns["credsum"];
                this.columndocno = base.Columns["docno"];
                this.columnearn = base.Columns["earn"];
                this.columnknd = base.Columns["knd"];
                this.columntypcd = base.Columns["typcd"];
                this.columninternaltax = base.Columns["internaltax"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndoctyp = new global::System.Data.DataColumn("doctyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndoctyp);
                this.columndatfrm = new global::System.Data.DataColumn("datfrm", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatfrm);
                this.columndatto = new global::System.Data.DataColumn("datto", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatto);
                this.columnstmpdmnd = new global::System.Data.DataColumn("stmpdmnd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpdmnd);
                this.columnstmpknd = new global::System.Data.DataColumn("stmpknd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpknd);
                this.columnstmpndus = new global::System.Data.DataColumn("stmpndus", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpndus);
                this.columnstmpcons = new global::System.Data.DataColumn("stmpcons", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpcons);
                this.columnstmpsup = new global::System.Data.DataColumn("stmpsup", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmpsup);
                this.columnsuppcom = new global::System.Data.DataColumn("suppcom", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuppcom);
                this.columnfincomb = new global::System.Data.DataColumn("fincomb", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfincomb);
                this.columnfreejbs = new global::System.Data.DataColumn("freejbs", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfreejbs);
                this.columnprft = new global::System.Data.DataColumn("prft", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprft);
                this.columnstmp = new global::System.Data.DataColumn("stmp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstmp);
                this.columncontract = new global::System.Data.DataColumn("contract", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontract);
                this.columntswya = new global::System.Data.DataColumn("tswya", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntswya);
                this.columncheck = new global::System.Data.DataColumn("check", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncheck);
                this.columndepsum = new global::System.Data.DataColumn("depsum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndepsum);
                this.columncredsum = new global::System.Data.DataColumn("credsum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncredsum);
                this.columndocno = new global::System.Data.DataColumn("docno", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocno);
                this.columnearn = new global::System.Data.DataColumn("earn", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnearn);
                this.columnknd = new global::System.Data.DataColumn("knd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnknd);
                this.columntypcd = new global::System.Data.DataColumn("typcd", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntypcd);
                this.columninternaltax = new global::System.Data.DataColumn("internaltax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninternaltax);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcRow NewtaxclcRow() {
                return ((taxclcRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new taxclcRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(taxclcRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.taxclcRowChanged != null)) {
                    this.taxclcRowChanged(this, new taxclcRowChangeEvent(((taxclcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.taxclcRowChanging != null)) {
                    this.taxclcRowChanging(this, new taxclcRowChangeEvent(((taxclcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.taxclcRowDeleted != null)) {
                    this.taxclcRowDeleted(this, new taxclcRowChangeEvent(((taxclcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.taxclcRowDeleting != null)) {
                    this.taxclcRowDeleting(this, new taxclcRowChangeEvent(((taxclcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetaxclcRow(taxclcRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "taxclcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class paiedtaxDataTable : global::System.Data.TypedTableBase<paiedtaxRow> {
            
            private global::System.Data.DataColumn columntaxtyp;
            
            private global::System.Data.DataColumn columndatfrm;
            
            private global::System.Data.DataColumn columndatto;
            
            private global::System.Data.DataColumn columnsum;
            
            private global::System.Data.DataColumn columnlblnm;
            
            private global::System.Data.DataColumn columndocnm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxDataTable() {
                this.TableName = "paiedtax";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal paiedtaxDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected paiedtaxDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxtypColumn {
                get {
                    return this.columntaxtyp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datfrmColumn {
                get {
                    return this.columndatfrm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dattoColumn {
                get {
                    return this.columndatto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sumColumn {
                get {
                    return this.columnsum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lblnmColumn {
                get {
                    return this.columnlblnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docnmColumn {
                get {
                    return this.columndocnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxRow this[int index] {
                get {
                    return ((paiedtaxRow)(this.Rows[index]));
                }
            }
            
            public event paiedtaxRowChangeEventHandler paiedtaxRowChanging;
            
            public event paiedtaxRowChangeEventHandler paiedtaxRowChanged;
            
            public event paiedtaxRowChangeEventHandler paiedtaxRowDeleting;
            
            public event paiedtaxRowChangeEventHandler paiedtaxRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpaiedtaxRow(paiedtaxRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxRow AddpaiedtaxRow(string taxtyp, System.DateTime datfrm, System.DateTime datto, decimal sum, string lblnm, string docnm) {
                paiedtaxRow rowpaiedtaxRow = ((paiedtaxRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        taxtyp,
                        datfrm,
                        datto,
                        sum,
                        lblnm,
                        docnm};
                rowpaiedtaxRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpaiedtaxRow);
                return rowpaiedtaxRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                paiedtaxDataTable cln = ((paiedtaxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new paiedtaxDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntaxtyp = base.Columns["taxtyp"];
                this.columndatfrm = base.Columns["datfrm"];
                this.columndatto = base.Columns["datto"];
                this.columnsum = base.Columns["sum"];
                this.columnlblnm = base.Columns["lblnm"];
                this.columndocnm = base.Columns["docnm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntaxtyp = new global::System.Data.DataColumn("taxtyp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxtyp);
                this.columndatfrm = new global::System.Data.DataColumn("datfrm", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatfrm);
                this.columndatto = new global::System.Data.DataColumn("datto", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatto);
                this.columnsum = new global::System.Data.DataColumn("sum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsum);
                this.columnlblnm = new global::System.Data.DataColumn("lblnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlblnm);
                this.columndocnm = new global::System.Data.DataColumn("docnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocnm);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxRow NewpaiedtaxRow() {
                return ((paiedtaxRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new paiedtaxRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(paiedtaxRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.paiedtaxRowChanged != null)) {
                    this.paiedtaxRowChanged(this, new paiedtaxRowChangeEvent(((paiedtaxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.paiedtaxRowChanging != null)) {
                    this.paiedtaxRowChanging(this, new paiedtaxRowChangeEvent(((paiedtaxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.paiedtaxRowDeleted != null)) {
                    this.paiedtaxRowDeleted(this, new paiedtaxRowChangeEvent(((paiedtaxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.paiedtaxRowDeleting != null)) {
                    this.paiedtaxRowDeleting(this, new paiedtaxRowChangeEvent(((paiedtaxRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepaiedtaxRow(paiedtaxRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "paiedtaxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TBLSUBDataTable : global::System.Data.TypedTableBase<TBLSUBRow> {
            
            private global::System.Data.DataColumn columnsupcd;
            
            private global::System.Data.DataColumn columnsupnm;
            
            private global::System.Data.DataColumn columntaxnm;
            
            private global::System.Data.DataColumn columntaxprc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBDataTable() {
                this.TableName = "TBLSUB";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TBLSUBDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TBLSUBDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supcdColumn {
                get {
                    return this.columnsupcd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supnmColumn {
                get {
                    return this.columnsupnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxnmColumn {
                get {
                    return this.columntaxnm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn taxprcColumn {
                get {
                    return this.columntaxprc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBRow this[int index] {
                get {
                    return ((TBLSUBRow)(this.Rows[index]));
                }
            }
            
            public event TBLSUBRowChangeEventHandler TBLSUBRowChanging;
            
            public event TBLSUBRowChangeEventHandler TBLSUBRowChanged;
            
            public event TBLSUBRowChangeEventHandler TBLSUBRowDeleting;
            
            public event TBLSUBRowChangeEventHandler TBLSUBRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTBLSUBRow(TBLSUBRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBRow AddTBLSUBRow(string supcd, string supnm, string taxnm, decimal taxprc) {
                TBLSUBRow rowTBLSUBRow = ((TBLSUBRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        supcd,
                        supnm,
                        taxnm,
                        taxprc};
                rowTBLSUBRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTBLSUBRow);
                return rowTBLSUBRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TBLSUBDataTable cln = ((TBLSUBDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TBLSUBDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsupcd = base.Columns["supcd"];
                this.columnsupnm = base.Columns["supnm"];
                this.columntaxnm = base.Columns["taxnm"];
                this.columntaxprc = base.Columns["taxprc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsupcd = new global::System.Data.DataColumn("supcd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupcd);
                this.columnsupnm = new global::System.Data.DataColumn("supnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupnm);
                this.columntaxnm = new global::System.Data.DataColumn("taxnm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxnm);
                this.columntaxprc = new global::System.Data.DataColumn("taxprc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntaxprc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBRow NewTBLSUBRow() {
                return ((TBLSUBRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TBLSUBRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TBLSUBRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TBLSUBRowChanged != null)) {
                    this.TBLSUBRowChanged(this, new TBLSUBRowChangeEvent(((TBLSUBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TBLSUBRowChanging != null)) {
                    this.TBLSUBRowChanging(this, new TBLSUBRowChangeEvent(((TBLSUBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TBLSUBRowDeleted != null)) {
                    this.TBLSUBRowDeleted(this, new TBLSUBRowChangeEvent(((TBLSUBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TBLSUBRowDeleting != null)) {
                    this.TBLSUBRowDeleting(this, new TBLSUBRowChangeEvent(((TBLSUBRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTBLSUBRow(TBLSUBRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TBLSUBDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class earnJobDataTable : global::System.Data.TypedTableBase<earnJobRow> {
            
            private global::System.Data.DataColumn columnyr;
            
            private global::System.Data.DataColumn columnmn;
            
            private global::System.Data.DataColumn columnpaid;
            
            private global::System.Data.DataColumn columnneeded;
            
            private global::System.Data.DataColumn columncheckNo;
            
            private global::System.Data.DataColumn columnbank;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobDataTable() {
                this.TableName = "earnJob";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal earnJobDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected earnJobDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yrColumn {
                get {
                    return this.columnyr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mnColumn {
                get {
                    return this.columnmn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paidColumn {
                get {
                    return this.columnpaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn neededColumn {
                get {
                    return this.columnneeded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn checkNoColumn {
                get {
                    return this.columncheckNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bankColumn {
                get {
                    return this.columnbank;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobRow this[int index] {
                get {
                    return ((earnJobRow)(this.Rows[index]));
                }
            }
            
            public event earnJobRowChangeEventHandler earnJobRowChanging;
            
            public event earnJobRowChangeEventHandler earnJobRowChanged;
            
            public event earnJobRowChangeEventHandler earnJobRowDeleting;
            
            public event earnJobRowChangeEventHandler earnJobRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddearnJobRow(earnJobRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobRow AddearnJobRow(int yr, int mn, decimal paid, decimal needed, string checkNo, string bank) {
                earnJobRow rowearnJobRow = ((earnJobRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        yr,
                        mn,
                        paid,
                        needed,
                        checkNo,
                        bank};
                rowearnJobRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowearnJobRow);
                return rowearnJobRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                earnJobDataTable cln = ((earnJobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new earnJobDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnyr = base.Columns["yr"];
                this.columnmn = base.Columns["mn"];
                this.columnpaid = base.Columns["paid"];
                this.columnneeded = base.Columns["needed"];
                this.columncheckNo = base.Columns["checkNo"];
                this.columnbank = base.Columns["bank"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnyr = new global::System.Data.DataColumn("yr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyr);
                this.columnmn = new global::System.Data.DataColumn("mn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmn);
                this.columnpaid = new global::System.Data.DataColumn("paid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaid);
                this.columnneeded = new global::System.Data.DataColumn("needed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnneeded);
                this.columncheckNo = new global::System.Data.DataColumn("checkNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckNo);
                this.columnbank = new global::System.Data.DataColumn("bank", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbank);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobRow NewearnJobRow() {
                return ((earnJobRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new earnJobRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(earnJobRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.earnJobRowChanged != null)) {
                    this.earnJobRowChanged(this, new earnJobRowChangeEvent(((earnJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.earnJobRowChanging != null)) {
                    this.earnJobRowChanging(this, new earnJobRowChangeEvent(((earnJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.earnJobRowDeleted != null)) {
                    this.earnJobRowDeleted(this, new earnJobRowChangeEvent(((earnJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.earnJobRowDeleting != null)) {
                    this.earnJobRowDeleting(this, new earnJobRowChangeEvent(((earnJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveearnJobRow(earnJobRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RptDS ds = new RptDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "earnJobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tblbscsupdtRow : global::System.Data.DataRow {
            
            private tblbscsupdtDataTable tabletblbscsupdt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tblbscsupdtRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblbscsupdt = ((tblbscsupdtDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docno {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.docnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docno\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.docnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supnm {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.supnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'supnm\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.supnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblbscsupdt.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prftcred {
                get {
                    try {
                        return ((decimal)(this[this.tabletblbscsupdt.prftcredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prftcred\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.prftcredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal freejbscred {
                get {
                    try {
                        return ((decimal)(this[this.tabletblbscsupdt.freejbscredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freejbscred\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.freejbscredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxcd {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.taxcdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxcd\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.taxcdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxnm {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.taxnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxnm\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.taxnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxfileNo {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.taxfileNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxfileNo\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.taxfileNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxrecNo {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.taxrecNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxrecNo\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.taxrecNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prftdep {
                get {
                    try {
                        return ((decimal)(this[this.tabletblbscsupdt.prftdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prftdep\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.prftdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal freejbsdep {
                get {
                    try {
                        return ((decimal)(this[this.tabletblbscsupdt.freejbsdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freejbsdep\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.freejbsdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prc {
                get {
                    try {
                        return ((decimal)(this[this.tabletblbscsupdt.prcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prc\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.prcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string txDep_Nm {
                get {
                    try {
                        return ((string)(this[this.tabletblbscsupdt.txDep_NmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'txDep_Nm\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.txDep_NmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dt {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletblbscsupdt.dtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dt\' in table \'tblbscsupdt\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblbscsupdt.dtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocnoNull() {
                return this.IsNull(this.tabletblbscsupdt.docnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocnoNull() {
                this[this.tabletblbscsupdt.docnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupnmNull() {
                return this.IsNull(this.tabletblbscsupdt.supnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupnmNull() {
                this[this.tabletblbscsupdt.supnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tabletblbscsupdt.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tabletblbscsupdt.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprftcredNull() {
                return this.IsNull(this.tabletblbscsupdt.prftcredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprftcredNull() {
                this[this.tabletblbscsupdt.prftcredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreejbscredNull() {
                return this.IsNull(this.tabletblbscsupdt.freejbscredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreejbscredNull() {
                this[this.tabletblbscsupdt.freejbscredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxcdNull() {
                return this.IsNull(this.tabletblbscsupdt.taxcdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxcdNull() {
                this[this.tabletblbscsupdt.taxcdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxnmNull() {
                return this.IsNull(this.tabletblbscsupdt.taxnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxnmNull() {
                this[this.tabletblbscsupdt.taxnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxfileNoNull() {
                return this.IsNull(this.tabletblbscsupdt.taxfileNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxfileNoNull() {
                this[this.tabletblbscsupdt.taxfileNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxrecNoNull() {
                return this.IsNull(this.tabletblbscsupdt.taxrecNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxrecNoNull() {
                this[this.tabletblbscsupdt.taxrecNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprftdepNull() {
                return this.IsNull(this.tabletblbscsupdt.prftdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprftdepNull() {
                this[this.tabletblbscsupdt.prftdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreejbsdepNull() {
                return this.IsNull(this.tabletblbscsupdt.freejbsdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreejbsdepNull() {
                this[this.tabletblbscsupdt.freejbsdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprcNull() {
                return this.IsNull(this.tabletblbscsupdt.prcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprcNull() {
                this[this.tabletblbscsupdt.prcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstxDep_NmNull() {
                return this.IsNull(this.tabletblbscsupdt.txDep_NmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettxDep_NmNull() {
                this[this.tabletblbscsupdt.txDep_NmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdtNull() {
                return this.IsNull(this.tabletblbscsupdt.dtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdtNull() {
                this[this.tabletblbscsupdt.dtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class taxdeclRow : global::System.Data.DataRow {
            
            private taxdeclDataTable tabletaxdecl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxdeclRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletaxdecl = ((taxdeclDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal credsum {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxdecl.credsumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credsum\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.credsumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxdecl.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal taxprc {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxdecl.taxprcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxprc\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.taxprcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string period {
                get {
                    try {
                        return ((string)(this[this.tabletaxdecl.periodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'period\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.periodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supnm {
                get {
                    try {
                        return ((string)(this[this.tabletaxdecl.supnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'supnm\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.supnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string notes {
                get {
                    try {
                        return ((string)(this[this.tabletaxdecl.notesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'notes\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.notesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string checkNo {
                get {
                    try {
                        return ((string)(this[this.tabletaxdecl.checkNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'checkNo\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.checkNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime checkDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxdecl.checkDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'checkDate\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.checkDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bank {
                get {
                    try {
                        return ((string)(this[this.tabletaxdecl.bankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bank\' in table \'taxdecl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxdecl.bankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscredsumNull() {
                return this.IsNull(this.tabletaxdecl.credsumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcredsumNull() {
                this[this.tabletaxdecl.credsumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tabletaxdecl.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tabletaxdecl.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxprcNull() {
                return this.IsNull(this.tabletaxdecl.taxprcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxprcNull() {
                this[this.tabletaxdecl.taxprcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperiodNull() {
                return this.IsNull(this.tabletaxdecl.periodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperiodNull() {
                this[this.tabletaxdecl.periodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupnmNull() {
                return this.IsNull(this.tabletaxdecl.supnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupnmNull() {
                this[this.tabletaxdecl.supnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnotesNull() {
                return this.IsNull(this.tabletaxdecl.notesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnotesNull() {
                this[this.tabletaxdecl.notesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscheckNoNull() {
                return this.IsNull(this.tabletaxdecl.checkNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcheckNoNull() {
                this[this.tabletaxdecl.checkNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscheckDateNull() {
                return this.IsNull(this.tabletaxdecl.checkDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcheckDateNull() {
                this[this.tabletaxdecl.checkDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbankNull() {
                return this.IsNull(this.tabletaxdecl.bankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbankNull() {
                this[this.tabletaxdecl.bankColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class balancerevRow : global::System.Data.DataRow {
            
            private balancerevDataTable tablebalancerev;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal balancerevRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebalancerev = ((balancerevDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docnm {
                get {
                    try {
                        return ((string)(this[this.tablebalancerev.docnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docnm\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.docnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dep_nkdy_doc {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.dep_nkdy_docColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dep_nkdy_doc\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.dep_nkdy_docColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dep_nkdy_tsw {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.dep_nkdy_tswColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dep_nkdy_tsw\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.dep_nkdy_tswColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablebalancerev.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string typnm {
                get {
                    try {
                        return ((string)(this[this.tablebalancerev.typnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'typnm\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.typnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cred_nkdy_doc {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.cred_nkdy_docColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cred_nkdy_doc\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.cred_nkdy_docColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cred_nkdy_tsw {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.cred_nkdy_tswColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cred_nkdy_tsw\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.cred_nkdy_tswColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dep_tsw_tsw {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.dep_tsw_tswColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dep_tsw_tsw\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.dep_tsw_tswColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dep_tsw_doc {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.dep_tsw_docColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dep_tsw_doc\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.dep_tsw_docColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cred_tsw_tsw {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.cred_tsw_tswColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cred_tsw_tsw\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.cred_tsw_tswColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cred_tsw_doc {
                get {
                    try {
                        return ((decimal)(this[this.tablebalancerev.cred_tsw_docColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cred_tsw_doc\' in table \'balancerev\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebalancerev.cred_tsw_docColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocnmNull() {
                return this.IsNull(this.tablebalancerev.docnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocnmNull() {
                this[this.tablebalancerev.docnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdep_nkdy_docNull() {
                return this.IsNull(this.tablebalancerev.dep_nkdy_docColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdep_nkdy_docNull() {
                this[this.tablebalancerev.dep_nkdy_docColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdep_nkdy_tswNull() {
                return this.IsNull(this.tablebalancerev.dep_nkdy_tswColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdep_nkdy_tswNull() {
                this[this.tablebalancerev.dep_nkdy_tswColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablebalancerev.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablebalancerev.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypnmNull() {
                return this.IsNull(this.tablebalancerev.typnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypnmNull() {
                this[this.tablebalancerev.typnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscred_nkdy_docNull() {
                return this.IsNull(this.tablebalancerev.cred_nkdy_docColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcred_nkdy_docNull() {
                this[this.tablebalancerev.cred_nkdy_docColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscred_nkdy_tswNull() {
                return this.IsNull(this.tablebalancerev.cred_nkdy_tswColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcred_nkdy_tswNull() {
                this[this.tablebalancerev.cred_nkdy_tswColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdep_tsw_tswNull() {
                return this.IsNull(this.tablebalancerev.dep_tsw_tswColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdep_tsw_tswNull() {
                this[this.tablebalancerev.dep_tsw_tswColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdep_tsw_docNull() {
                return this.IsNull(this.tablebalancerev.dep_tsw_docColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdep_tsw_docNull() {
                this[this.tablebalancerev.dep_tsw_docColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscred_tsw_tswNull() {
                return this.IsNull(this.tablebalancerev.cred_tsw_tswColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcred_tsw_tswNull() {
                this[this.tablebalancerev.cred_tsw_tswColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscred_tsw_docNull() {
                return this.IsNull(this.tablebalancerev.cred_tsw_docColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcred_tsw_docNull() {
                this[this.tablebalancerev.cred_tsw_docColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class elbowRow : global::System.Data.DataRow {
            
            private elbowDataTable tableelbow;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal elbowRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableelbow = ((elbowDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal earndep {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.earndepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earndep\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.earndepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prftdep {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.prftdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prftdep\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.prftdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpdep {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.stmpdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpdep\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.stmpdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fincombdep {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.fincombdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fincombdep\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.fincombdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suppcomdep {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.suppcomdepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'suppcomdep\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.suppcomdepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal earncred {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.earncredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earncred\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.earncredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prftcred {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.prftcredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prftcred\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.prftcredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpcred {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.stmpcredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpcred\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.stmpcredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fincombcred {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.fincombcredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fincombcred\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.fincombcredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suppcomcred {
                get {
                    try {
                        return ((decimal)(this[this.tableelbow.suppcomcredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'suppcomcred\' in table \'elbow\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableelbow.suppcomcredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearndepNull() {
                return this.IsNull(this.tableelbow.earndepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearndepNull() {
                this[this.tableelbow.earndepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprftdepNull() {
                return this.IsNull(this.tableelbow.prftdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprftdepNull() {
                this[this.tableelbow.prftdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpdepNull() {
                return this.IsNull(this.tableelbow.stmpdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpdepNull() {
                this[this.tableelbow.stmpdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfincombdepNull() {
                return this.IsNull(this.tableelbow.fincombdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfincombdepNull() {
                this[this.tableelbow.fincombdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuppcomdepNull() {
                return this.IsNull(this.tableelbow.suppcomdepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuppcomdepNull() {
                this[this.tableelbow.suppcomdepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearncredNull() {
                return this.IsNull(this.tableelbow.earncredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearncredNull() {
                this[this.tableelbow.earncredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprftcredNull() {
                return this.IsNull(this.tableelbow.prftcredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprftcredNull() {
                this[this.tableelbow.prftcredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpcredNull() {
                return this.IsNull(this.tableelbow.stmpcredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpcredNull() {
                this[this.tableelbow.stmpcredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfincombcredNull() {
                return this.IsNull(this.tableelbow.fincombcredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfincombcredNull() {
                this[this.tableelbow.fincombcredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuppcomcredNull() {
                return this.IsNull(this.tableelbow.suppcomcredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuppcomcredNull() {
                this[this.tableelbow.suppcomcredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class taxSharingRow : global::System.Data.DataRow {
            
            private taxSharingDataTable tabletaxSharing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxSharingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletaxSharing = ((taxSharingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datefrm {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxSharing.datefrmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datefrm\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.datefrmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dateto {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxSharing.datetoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dateto\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.datetoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dep {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxSharing.depColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dep\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.depColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal cred {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxSharing.credColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cred\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.credColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lbl {
                get {
                    try {
                        return ((string)(this[this.tabletaxSharing.lblColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lbl\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.lblColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docno {
                get {
                    try {
                        return ((string)(this[this.tabletaxSharing.docnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docno\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.docnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string typ {
                get {
                    try {
                        return ((string)(this[this.tabletaxSharing.typColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'typ\' in table \'taxSharing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxSharing.typColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatefrmNull() {
                return this.IsNull(this.tabletaxSharing.datefrmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatefrmNull() {
                this[this.tabletaxSharing.datefrmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatetoNull() {
                return this.IsNull(this.tabletaxSharing.datetoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatetoNull() {
                this[this.tabletaxSharing.datetoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdepNull() {
                return this.IsNull(this.tabletaxSharing.depColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdepNull() {
                this[this.tabletaxSharing.depColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscredNull() {
                return this.IsNull(this.tabletaxSharing.credColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcredNull() {
                this[this.tabletaxSharing.credColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslblNull() {
                return this.IsNull(this.tabletaxSharing.lblColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlblNull() {
                this[this.tabletaxSharing.lblColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocnoNull() {
                return this.IsNull(this.tabletaxSharing.docnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocnoNull() {
                this[this.tabletaxSharing.docnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypNull() {
                return this.IsNull(this.tabletaxSharing.typColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypNull() {
                this[this.tabletaxSharing.typColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class taxclcRow : global::System.Data.DataRow {
            
            private taxclcDataTable tabletaxclc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal taxclcRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletaxclc = ((taxclcDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doctyp {
                get {
                    try {
                        return ((string)(this[this.tabletaxclc.doctypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'doctyp\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.doctypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datfrm {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxclc.datfrmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datfrm\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.datfrmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datto {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabletaxclc.dattoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datto\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.dattoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpdmnd {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpdmndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpdmnd\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpdmndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpknd {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpkndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpknd\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpkndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpndus {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpndusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpndus\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpndusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpcons {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpconsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpcons\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpconsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmpsup {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpsupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmpsup\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpsupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal suppcom {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.suppcomColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'suppcom\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.suppcomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fincomb {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.fincombColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fincomb\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.fincombColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal freejbs {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.freejbsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'freejbs\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.freejbsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal prft {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.prftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prft\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.prftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal stmp {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.stmpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stmp\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.stmpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal contract {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.contractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contract\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.contractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tswya {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.tswyaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tswya\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.tswyaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal check {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.checkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'check\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.checkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal depsum {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.depsumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'depsum\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.depsumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal credsum {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.credsumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credsum\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.credsumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal docno {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.docnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docno\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.docnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal earn {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.earnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'earn\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.earnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string knd {
                get {
                    try {
                        return ((string)(this[this.tabletaxclc.kndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'knd\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.kndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short typcd {
                get {
                    try {
                        return ((short)(this[this.tabletaxclc.typcdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'typcd\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.typcdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal internaltax {
                get {
                    try {
                        return ((decimal)(this[this.tabletaxclc.internaltaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'internaltax\' in table \'taxclc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletaxclc.internaltaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdoctypNull() {
                return this.IsNull(this.tabletaxclc.doctypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdoctypNull() {
                this[this.tabletaxclc.doctypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatfrmNull() {
                return this.IsNull(this.tabletaxclc.datfrmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatfrmNull() {
                this[this.tabletaxclc.datfrmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdattoNull() {
                return this.IsNull(this.tabletaxclc.dattoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdattoNull() {
                this[this.tabletaxclc.dattoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpdmndNull() {
                return this.IsNull(this.tabletaxclc.stmpdmndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpdmndNull() {
                this[this.tabletaxclc.stmpdmndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpkndNull() {
                return this.IsNull(this.tabletaxclc.stmpkndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpkndNull() {
                this[this.tabletaxclc.stmpkndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpndusNull() {
                return this.IsNull(this.tabletaxclc.stmpndusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpndusNull() {
                this[this.tabletaxclc.stmpndusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpconsNull() {
                return this.IsNull(this.tabletaxclc.stmpconsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpconsNull() {
                this[this.tabletaxclc.stmpconsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpsupNull() {
                return this.IsNull(this.tabletaxclc.stmpsupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpsupNull() {
                this[this.tabletaxclc.stmpsupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuppcomNull() {
                return this.IsNull(this.tabletaxclc.suppcomColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuppcomNull() {
                this[this.tabletaxclc.suppcomColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfincombNull() {
                return this.IsNull(this.tabletaxclc.fincombColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfincombNull() {
                this[this.tabletaxclc.fincombColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreejbsNull() {
                return this.IsNull(this.tabletaxclc.freejbsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreejbsNull() {
                this[this.tabletaxclc.freejbsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprftNull() {
                return this.IsNull(this.tabletaxclc.prftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprftNull() {
                this[this.tabletaxclc.prftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstmpNull() {
                return this.IsNull(this.tabletaxclc.stmpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstmpNull() {
                this[this.tabletaxclc.stmpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontractNull() {
                return this.IsNull(this.tabletaxclc.contractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontractNull() {
                this[this.tabletaxclc.contractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstswyaNull() {
                return this.IsNull(this.tabletaxclc.tswyaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettswyaNull() {
                this[this.tabletaxclc.tswyaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscheckNull() {
                return this.IsNull(this.tabletaxclc.checkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcheckNull() {
                this[this.tabletaxclc.checkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdepsumNull() {
                return this.IsNull(this.tabletaxclc.depsumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdepsumNull() {
                this[this.tabletaxclc.depsumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscredsumNull() {
                return this.IsNull(this.tabletaxclc.credsumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcredsumNull() {
                this[this.tabletaxclc.credsumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocnoNull() {
                return this.IsNull(this.tabletaxclc.docnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocnoNull() {
                this[this.tabletaxclc.docnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsearnNull() {
                return this.IsNull(this.tabletaxclc.earnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetearnNull() {
                this[this.tabletaxclc.earnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskndNull() {
                return this.IsNull(this.tabletaxclc.kndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkndNull() {
                this[this.tabletaxclc.kndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypcdNull() {
                return this.IsNull(this.tabletaxclc.typcdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypcdNull() {
                this[this.tabletaxclc.typcdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsinternaltaxNull() {
                return this.IsNull(this.tabletaxclc.internaltaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetinternaltaxNull() {
                this[this.tabletaxclc.internaltaxColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class paiedtaxRow : global::System.Data.DataRow {
            
            private paiedtaxDataTable tablepaiedtax;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal paiedtaxRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepaiedtax = ((paiedtaxDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxtyp {
                get {
                    try {
                        return ((string)(this[this.tablepaiedtax.taxtypColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxtyp\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.taxtypColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datfrm {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepaiedtax.datfrmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datfrm\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.datfrmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datto {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablepaiedtax.dattoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datto\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.dattoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal sum {
                get {
                    try {
                        return ((decimal)(this[this.tablepaiedtax.sumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sum\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.sumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lblnm {
                get {
                    try {
                        return ((string)(this[this.tablepaiedtax.lblnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lblnm\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.lblnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string docnm {
                get {
                    try {
                        return ((string)(this[this.tablepaiedtax.docnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docnm\' in table \'paiedtax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepaiedtax.docnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxtypNull() {
                return this.IsNull(this.tablepaiedtax.taxtypColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxtypNull() {
                this[this.tablepaiedtax.taxtypColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatfrmNull() {
                return this.IsNull(this.tablepaiedtax.datfrmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatfrmNull() {
                this[this.tablepaiedtax.datfrmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdattoNull() {
                return this.IsNull(this.tablepaiedtax.dattoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdattoNull() {
                this[this.tablepaiedtax.dattoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssumNull() {
                return this.IsNull(this.tablepaiedtax.sumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsumNull() {
                this[this.tablepaiedtax.sumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslblnmNull() {
                return this.IsNull(this.tablepaiedtax.lblnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlblnmNull() {
                this[this.tablepaiedtax.lblnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocnmNull() {
                return this.IsNull(this.tablepaiedtax.docnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocnmNull() {
                this[this.tablepaiedtax.docnmColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TBLSUBRow : global::System.Data.DataRow {
            
            private TBLSUBDataTable tableTBLSUB;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TBLSUBRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTBLSUB = ((TBLSUBDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supcd {
                get {
                    try {
                        return ((string)(this[this.tableTBLSUB.supcdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'supcd\' in table \'TBLSUB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBLSUB.supcdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supnm {
                get {
                    try {
                        return ((string)(this[this.tableTBLSUB.supnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'supnm\' in table \'TBLSUB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBLSUB.supnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string taxnm {
                get {
                    try {
                        return ((string)(this[this.tableTBLSUB.taxnmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxnm\' in table \'TBLSUB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBLSUB.taxnmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal taxprc {
                get {
                    try {
                        return ((decimal)(this[this.tableTBLSUB.taxprcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'taxprc\' in table \'TBLSUB\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTBLSUB.taxprcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupcdNull() {
                return this.IsNull(this.tableTBLSUB.supcdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupcdNull() {
                this[this.tableTBLSUB.supcdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupnmNull() {
                return this.IsNull(this.tableTBLSUB.supnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupnmNull() {
                this[this.tableTBLSUB.supnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxnmNull() {
                return this.IsNull(this.tableTBLSUB.taxnmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxnmNull() {
                this[this.tableTBLSUB.taxnmColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstaxprcNull() {
                return this.IsNull(this.tableTBLSUB.taxprcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettaxprcNull() {
                this[this.tableTBLSUB.taxprcColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class earnJobRow : global::System.Data.DataRow {
            
            private earnJobDataTable tableearnJob;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal earnJobRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableearnJob = ((earnJobDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yr {
                get {
                    try {
                        return ((int)(this[this.tableearnJob.yrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'yr\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.yrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int mn {
                get {
                    try {
                        return ((int)(this[this.tableearnJob.mnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mn\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.mnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal paid {
                get {
                    try {
                        return ((decimal)(this[this.tableearnJob.paidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'paid\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.paidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal needed {
                get {
                    try {
                        return ((decimal)(this[this.tableearnJob.neededColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'needed\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.neededColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string checkNo {
                get {
                    try {
                        return ((string)(this[this.tableearnJob.checkNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'checkNo\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.checkNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bank {
                get {
                    try {
                        return ((string)(this[this.tableearnJob.bankColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bank\' in table \'earnJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableearnJob.bankColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsyrNull() {
                return this.IsNull(this.tableearnJob.yrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetyrNull() {
                this[this.tableearnJob.yrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmnNull() {
                return this.IsNull(this.tableearnJob.mnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmnNull() {
                this[this.tableearnJob.mnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspaidNull() {
                return this.IsNull(this.tableearnJob.paidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpaidNull() {
                this[this.tableearnJob.paidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsneededNull() {
                return this.IsNull(this.tableearnJob.neededColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetneededNull() {
                this[this.tableearnJob.neededColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscheckNoNull() {
                return this.IsNull(this.tableearnJob.checkNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcheckNoNull() {
                this[this.tableearnJob.checkNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbankNull() {
                return this.IsNull(this.tableearnJob.bankColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbankNull() {
                this[this.tableearnJob.bankColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tblbscsupdtRowChangeEvent : global::System.EventArgs {
            
            private tblbscsupdtRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtRowChangeEvent(tblbscsupdtRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tblbscsupdtRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class taxdeclRowChangeEvent : global::System.EventArgs {
            
            private taxdeclRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclRowChangeEvent(taxdeclRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxdeclRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class balancerevRowChangeEvent : global::System.EventArgs {
            
            private balancerevRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevRowChangeEvent(balancerevRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public balancerevRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class elbowRowChangeEvent : global::System.EventArgs {
            
            private elbowRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowRowChangeEvent(elbowRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public elbowRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class taxSharingRowChangeEvent : global::System.EventArgs {
            
            private taxSharingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingRowChangeEvent(taxSharingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxSharingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class taxclcRowChangeEvent : global::System.EventArgs {
            
            private taxclcRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcRowChangeEvent(taxclcRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public taxclcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class paiedtaxRowChangeEvent : global::System.EventArgs {
            
            private paiedtaxRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxRowChangeEvent(paiedtaxRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public paiedtaxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TBLSUBRowChangeEvent : global::System.EventArgs {
            
            private TBLSUBRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBRowChangeEvent(TBLSUBRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TBLSUBRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class earnJobRowChangeEvent : global::System.EventArgs {
            
            private earnJobRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobRowChangeEvent(earnJobRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public earnJobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591